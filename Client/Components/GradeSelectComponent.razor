@using GradeConverter.Shared
@inject HttpClient Http



@if(grades != null) {
    @foreach (var grade in grades)
    {
        <MudCard Elevation=1 class="mb-3">
             <MudCardHeader>
                <CardHeaderContent>
                    <MudChip Color="Color.Primary">@grade.ToGrade</MudChip> <MudText Inline=true Typo="Typo.body2">a <span>@grade.FromGrade</span> in <span>@grade.FromGradeSystemName</span></MudText>
                    @* <MudText><span>@grade.ToGrade</span></MudText> *@
                </CardHeaderContent>
             </MudCardHeader>
        </MudCard>
    }
}

@code {

    [Parameter]
    public string Grade { get; set; }

    [Parameter]
    public EventCallback<string> GradeChanged { get; set; }


    [Parameter]
    public bool Sport { get; set; } = true;

    [Parameter]
    public EventCallback<bool> SportChanged { get; set; }

    private GradeMatch[] grades;
    
    private void GetGrades() {       
    }

    protected override async Task OnParametersSetAsync()
    {
        grades = await Http.GetFromJsonAsync<GradeMatch[]>( 
            Sport? $"GradeConversion/GetSouthAfricanRouteGrade?grade={System.Net.WebUtility.UrlEncode(Grade)}" 
            : $"GradeConversion/GetSouthAfricanBoulderGrade?grade={System.Net.WebUtility.UrlEncode(Grade)}");
    }   
}